<template>
  <view class="settings-page">
    <view class="settings-content">
      <!-- 录制配置 -->
      <view class="settings-section">
        <view class="section-header">
          <text class="section-title">录制配置</text>
        </view>
        
        <view class="setting-item">
          <text class="setting-label">录制模式</text>
          <picker 
            :value="recordingModeIndex" 
            :range="recordingModeOptions" 
            @change="onRecordingModeChange"
          >
            <view class="picker-value">
              <text>{{ recordingModeText }}</text>
              <text class="picker-arrow">></text>
            </view>
          </picker>
        </view>

        <view class="setting-item">
          <text class="setting-label">分辨率</text>
          <picker 
            :value="resolutionIndex" 
            :range="resolutionOptions" 
            @change="onResolutionChange"
          >
            <view class="picker-value">
              <text>{{ resolutionText }}</text>
              <text class="picker-arrow">></text>
            </view>
          </picker>
        </view>

        <view class="setting-item">
          <text class="setting-label">帧率</text>
          <picker 
            :value="frameRateIndex" 
            :range="frameRateOptions" 
            @change="onFrameRateChange"
          >
            <view class="picker-value">
              <text>{{ frameRateText }}</text>
              <text class="picker-arrow">></text>
            </view>
          </picker>
        </view>

        <view class="setting-item">
          <text class="setting-label">编码格式</text>
          <picker 
            :value="codecIndex" 
            :range="codecOptions" 
            @change="onCodecChange"
          >
            <view class="picker-value">
              <text>{{ codecText }}</text>
              <text class="picker-arrow">></text>
            </view>
          </picker>
        </view>
      </view>

      <!-- 滤镜配置 -->
      <view class="settings-section">
        <view class="section-header">
          <text class="section-title">滤镜配置</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">Log 模式</text>
          <switch 
            :checked="filterConfig.logMode" 
            @change="onLogModeChange"
            color="#667eea"
          />
        </view>

        <view class="setting-item">
          <text class="setting-label">Flat 模式</text>
          <switch 
            :checked="filterConfig.flatMode" 
            @change="onFlatModeChange"
            color="#667eea"
          />
        </view>

        <view class="setting-item">
          <text class="setting-label">曝光补偿</text>
          <view class="slider-container">
            <slider 
              :value="filterConfig.exposure"
              min="-300"
              max="300"
              @change="onExposureChange"
              activeColor="#667eea"
            />
            <text class="slider-value">{{ filterConfig.exposure }}</text>
          </view>
        </view>

        <view class="setting-item">
          <text class="setting-label">饱和度</text>
          <view class="slider-container">
            <slider 
              :value="filterConfig.saturation"
              min="0"
              max="200"
              @change="onSaturationChange"
              activeColor="#667eea"
            />
            <text class="slider-value">{{ filterConfig.saturation }}%</text>
          </view>
        </view>

        <view class="setting-item">
          <text class="setting-label">对比度</text>
          <view class="slider-container">
            <slider 
              :value="filterConfig.contrast"
              min="0"
              max="200"
              @change="onContrastChange"
              activeColor="#667eea"
            />
            <text class="slider-value">{{ filterConfig.contrast }}%</text>
          </view>
        </view>

        <view class="setting-item">
          <text class="setting-label">白平衡</text>
          <view class="slider-container">
            <slider 
              :value="filterConfig.whiteBalance"
              min="2000"
              max="8000"
              @change="onWhiteBalanceChange"
              activeColor="#667eea"
            />
            <text class="slider-value">{{ filterConfig.whiteBalance }}K</text>
          </view>
        </view>
      </view>

      <!-- 存储配置 -->
      <view class="settings-section">
        <view class="section-header">
          <text class="section-title">存储配置</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">存储路径</text>
          <view class="setting-value">
            <text class="value-text">{{ storagePath }}</text>
            <text class="change-btn" @click="changeStoragePath">更改</text>
          </view>
        </view>

        <view class="setting-item">
          <text class="setting-label">可用空间</text>
          <text class="setting-value">{{ availableSpace }}</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">自动清理</text>
          <switch 
            :checked="autoCleanup" 
            @change="onAutoCleanupChange"
            color="#667eea"
          />
        </view>
      </view>

      <!-- 性能配置 -->
      <view class="settings-section">
        <view class="section-header">
          <text class="section-title">性能配置</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">性能模式</text>
          <picker 
            :value="performanceModeIndex" 
            :range="performanceModeOptions" 
            @change="onPerformanceModeChange"
          >
            <view class="picker-value">
              <text>{{ performanceModeText }}</text>
              <text class="picker-arrow">></text>
            </view>
          </picker>
        </view>

        <view class="setting-item">
          <text class="setting-label">显示性能监控</text>
          <switch 
            :checked="showPerformanceMonitor" 
            @change="onShowPerformanceMonitorChange"
            color="#667eea"
          />
        </view>
      </view>

      <!-- 关于 -->
      <view class="settings-section">
        <view class="section-header">
          <text class="section-title">关于</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">版本号</text>
          <text class="setting-value">v0.1.0</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">检查更新</text>
          <text class="setting-value action" @click="checkUpdate">检查</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">用户协议</text>
          <text class="setting-value action" @click="showUserAgreement">查看</text>
        </view>

        <view class="setting-item">
          <text class="setting-label">隐私政策</text>
          <text class="setting-value action" @click="showPrivacyPolicy">查看</text>
        </view>
      </view>

      <!-- 重置按钮 -->
      <view class="reset-section">
        <button class="reset-btn" @click="resetSettings">重置所有设置</button>
      </view>
    </view>
  </view>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useAppStore } from '@/store'
import type { RecordingMode, VideoResolution, VideoCodec } from '@/types'

const appStore = useAppStore()

// 响应式数据
const storagePath = ref('/storage/DCIM/DualViewX')
const availableSpace = ref('15.2 GB')
const autoCleanup = ref(false)
const showPerformanceMonitor = ref(false)

// 选项数据
const recordingModeOptions = ['单路录制', '双路录制', '四路录制']
const resolutionOptions = ['720P', '1080P', '4K']
const frameRateOptions = ['24fps', '30fps', '60fps', '120fps']
const codecOptions = ['H.264', 'HEVC']
const performanceModeOptions = ['省电模式', '平衡模式', '性能模式']

// 计算属性
const recordingConfig = computed(() => appStore.recordingConfig)
const filterConfig = computed(() => appStore.filterConfig)

const recordingModeIndex = computed(() => {
  const modeMap: Record<RecordingMode, number> = {
    single: 0,
    dual: 1,
    quad: 2
  }
  return modeMap[recordingConfig.value.recordingMode]
})

const recordingModeText = computed(() => recordingModeOptions[recordingModeIndex.value])

const resolutionIndex = computed(() => {
  const resolutionMap: Record<VideoResolution, number> = {
    '720p': 0,
    '1080p': 1,
    '4k': 2
  }
  return resolutionMap[recordingConfig.value.resolution]
})

const resolutionText = computed(() => resolutionOptions[resolutionIndex.value])

const frameRateIndex = computed(() => {
  const frameRates = [24, 30, 60, 120]
  return frameRates.indexOf(recordingConfig.value.frameRate)
})

const frameRateText = computed(() => frameRateOptions[frameRateIndex.value])

const codecIndex = computed(() => {
  const codecMap: Record<VideoCodec, number> = {
    h264: 0,
    hevc: 1
  }
  return codecMap[recordingConfig.value.codec]
})

const codecText = computed(() => codecOptions[codecIndex.value])

const performanceModeIndex = ref(1) // 默认平衡模式
const performanceModeText = computed(() => performanceModeOptions[performanceModeIndex.value])

// 方法
const onRecordingModeChange = (e: any) => {
  const modeMap: RecordingMode[] = ['single', 'dual', 'quad']
  appStore.setRecordingConfig({ recordingMode: modeMap[e.detail.value] })
}

const onResolutionChange = (e: any) => {
  const resolutionMap: VideoResolution[] = ['720p', '1080p', '4k']
  appStore.setRecordingConfig({ resolution: resolutionMap[e.detail.value] })
}

const onFrameRateChange = (e: any) => {
  const frameRates = [24, 30, 60, 120]
  appStore.setRecordingConfig({ frameRate: frameRates[e.detail.value] })
}

const onCodecChange = (e: any) => {
  const codecMap: VideoCodec[] = ['h264', 'hevc']
  appStore.setRecordingConfig({ codec: codecMap[e.detail.value] })
}

const onLogModeChange = (e: any) => {
  appStore.setFilterConfig({ logMode: e.detail.value })
}

const onFlatModeChange = (e: any) => {
  appStore.setFilterConfig({ flatMode: e.detail.value })
}

const onExposureChange = (e: any) => {
  appStore.setFilterConfig({ exposure: e.detail.value })
}

const onSaturationChange = (e: any) => {
  appStore.setFilterConfig({ saturation: e.detail.value })
}

const onContrastChange = (e: any) => {
  appStore.setFilterConfig({ contrast: e.detail.value })
}

const onWhiteBalanceChange = (e: any) => {
  appStore.setFilterConfig({ whiteBalance: e.detail.value })
}

const onAutoCleanupChange = (e: any) => {
  autoCleanup.value = e.detail.value
}

const onShowPerformanceMonitorChange = (e: any) => {
  showPerformanceMonitor.value = e.detail.value
}

const onPerformanceModeChange = (e: any) => {
  performanceModeIndex.value = e.detail.value
}

const changeStoragePath = () => {
  uni.showModal({
    title: '选择存储路径',
    content: '请选择视频文件的存储位置',
    success: (res) => {
      if (res.confirm) {
        // 这里应该调用文件选择API
        uni.showToast({
          title: '功能开发中',
          icon: 'none'
        })
      }
    }
  })
}

const checkUpdate = () => {
  uni.showLoading({
    title: '检查更新中...'
  })
  
  setTimeout(() => {
    uni.hideLoading()
    uni.showModal({
      title: '检查更新',
      content: '当前已是最新版本',
      showCancel: false
    })
  }, 2000)
}

const showUserAgreement = () => {
  uni.showModal({
    title: '用户协议',
    content: '用户协议内容...',
    showCancel: false
  })
}

const showPrivacyPolicy = () => {
  uni.showModal({
    title: '隐私政策',
    content: '隐私政策内容...',
    showCancel: false
  })
}

const resetSettings = () => {
  uni.showModal({
    title: '重置设置',
    content: '确定要重置所有设置吗？此操作不可撤销。',
    success: (res) => {
      if (res.confirm) {
        // 重置所有设置
        appStore.setRecordingConfig({
          recordingMode: 'dual',
          resolution: '1080p',
          frameRate: 60,
          codec: 'h264',
          audioSampleRate: 48000,
          audioBitRate: 128000
        })
        
        appStore.setFilterConfig({
          exposure: 0,
          saturation: 100,
          contrast: 100,
          whiteBalance: 5500,
          logMode: false,
          flatMode: false
        })
        
        autoCleanup.value = false
        showPerformanceMonitor.value = false
        performanceModeIndex.value = 1
        
        uni.showToast({
          title: '设置已重置',
          icon: 'success'
        })
      }
    }
  })
}
</script>

<style scoped>
.settings-page {
  flex: 1;
  background-color: #f5f5f5;
}

.settings-content {
  padding: 20rpx;
}

.settings-section {
  background: white;
  border-radius: 20rpx;
  margin-bottom: 30rpx;
  overflow: hidden;
}

.section-header {
  padding: 30rpx 40rpx 20rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.section-title {
  font-size: 32rpx;
  font-weight: bold;
  color: #333;
}

.setting-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 30rpx 40rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.setting-item:last-child {
  border-bottom: none;
}

.setting-label {
  font-size: 28rpx;
  color: #333;
  flex: 1;
}

.setting-value {
  font-size: 28rpx;
  color: #666;
  display: flex;
  align-items: center;
  gap: 20rpx;
}

.value-text {
  max-width: 400rpx;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.change-btn, .action {
  color: #667eea;
  font-size: 24rpx;
}

.picker-value {
  display: flex;
  align-items: center;
  gap: 10rpx;
  font-size: 28rpx;
  color: #666;
}

.picker-arrow {
  font-size: 24rpx;
  color: #999;
}

.slider-container {
  display: flex;
  align-items: center;
  gap: 20rpx;
  flex: 1;
  max-width: 300rpx;
}

.slider-value {
  font-size: 24rpx;
  color: #666;
  min-width: 80rpx;
  text-align: right;
  font-family: monospace;
}

.reset-section {
  padding: 40rpx;
  text-align: center;
}

.reset-btn {
  background: #ff4d4f;
  color: white;
  border: none;
  border-radius: 20rpx;
  padding: 30rpx 60rpx;
  font-size: 28rpx;
  font-weight: 500;
}

.reset-btn::after {
  border: none;
}
</style>
